org: chdrdevelop
app: scraper-node
service: bestsellers-amazon
frameworkVersion: '2'
#variablesResolutionMode: 20210219
useDotenv: true

provider:
  name: aws
  apiName: bestsellers-amazon
  runtime: nodejs14.x
  lambdaHashingVersion: '20201221'
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]
            - Fn::GetAtt: [BestsellersAmazonHistorico, Arn]
  layers:
    - arn:aws:lambda:us-east-1:764866452798:layer:chrome-aws-lambda:25

plugins:
  - serverless-dotenv-plugin
  - serverless-step-functions

functions:
  atualizar:
    handler: atualizarBestsellers.handler
    description: Realiza o web scraping na página de Bestsellers da Amazon
    events:
      - httpApi: 'GET /atualizarlista'
      - eventBridge:
          schedule: rate(1 day)
    timeout: 30
  listar:
    handler: listarBestsellers.handler
    description: Lista os 3 produtos mais vendidos da Amazon
    events:
     - httpApi: 'GET /'  
    timeout: 30
  listarHistorico:
    handler: listarBestsellersHistorico.handler
    description: Lista os histórico de Bestsellers
    events:
     - httpApi: 'GET /historico'  
    timeout: 30
  atualizarHistorico:
    handler: atualizarBestsellersHistorico.handler
    description: Realiza o web scraping na página de Bestsellers da Amazon salvando no histórico
    events:
      - eventBridge:
          schedule: rate(1 day)
    timeout: 30
  enviarMensagemTelegram:
    handler: enviarMensagemTelegram.handler
    description: Realiza o envio da mensagem para o canal do telegram
    timeout: 30
    environment:
      CHAT_ID: ${env:CHAT_ID}
      TELEGRAM_TOKEN: ${env:TELEGRAM_TOKEN}
    

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: bestsellers-amazon
    BestsellersAmazonHistorico:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: bestsellers-amazon-historico

stepFunctions:
  stateMachines:
    attBestHist:
      events:
        - schedule:
            rate: rate(1 day)
            enabled: true
      name: AtualizacaoBestsellersHistoricoComTelegram
      type: EXPRESS
      definition:
        Comment: "Adiciona os novos Bestsellers ao histórico e avisa no canal do telegram"
        StartAt: BuscarBestsellersAmazonParaHistorico
        States:
          BuscarBestsellersAmazonParaHistorico:
            Type: Task
            Resource:
              Fn::GetAtt: [atualizarHistorico, Arn]
            Parameters:
              Payload.$: $
            #Retry: [ErrorEquals: [Lambda.ServiceException,Lambda.AWSLambdaException,Lambda.SdkClientException],IntervalSeconds: 2,MaxAttempts: 6,BackoffRate: 2]
            ResultSelector:
              mensagem.$: $.Payload.mensagem
            Next: EnviarMensagemTelegram
          EnviarMensagemTelegram:
            Type: Task
            Resource:
              Fn::GetAtt: [enviarMensagemTelegram, Arn]
            OutputPath: $.Payload
            Parameters:
              Payload.$: $
            #Retry: [ErrorEquals: [Lambda.ServiceException,Lambda.AWSLambdaException,Lambda.SdkClientException],IntervalSeconds: 2,MaxAttempts: 6,BackoffRate: 2]
            End: true